%\VignetteIndexEntry{Making and Utilizing TranscriptDb Objects}
%\VignetteKeywords{annotation}
%\VignettePackage{GenomicFeatures}
\documentclass[11pt]{article}

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}


\title{Making and Utilizing TranscriptDb Objects}
\author{Marc Carlson}

\SweaveOpts{keep.source=TRUE}

\begin{document}

\maketitle

\section{Introduction}

The \Rpackage{GenomicFeatures} package is a resource for standardizing the way we deal with Genomic Features annotations in Biocondutor.


\subsection{Generating a TranscriptDb Object}

Most of the time, you will probably want to generate a TranscriptDb
object from a standard source of annotations.  For this, you will want
to use a helper function like \Rfunction{makeTranscriptDbFromUCSC} or
\Rfunction{makeTranscriptDbFromBiomart}.

<<makeTranscriptDbFromUCSC 1>>=
library(GenomicFeatures)
txAnn <- makeTranscriptDbFromUCSC()
@

But for those times when you want to generate an annotation from a
more generic source, we also are providing
\Rfunction{makeTranscriptDb}.  It will be a lot less convenient to use
a function like \Rfunction{makeTranscriptDb} of course, but at least
it buys you the flexibility to produce a TransctriptDb from any
source.


\subsection{Saving and Loading a TranscriptDb Object}

When you 1st make your TranscriptDb Object, it is running from a
temporary file.  In order to save it you need to use the
\Rfunction{saveFeatures} function.

<<saveFeatures 1, eval=FALSE>>=
saveFeatures(txAnn, file="fileName.sqlite")
@

To retrieve the TranscriptDb object, you only need to use the
\Rfunction{loadFeatures} function.

<<loadFeatures 1, eval=FALSE>>=
loadFeatures("fileName.sqlite")
@


\subsection{Getting data from a TranscriptDb Object}

A TranscriptDb object is really just an R object that points to a
SQLite database.  This database can of course be accessed by simply
using the \Rpackage{DBI} interface, but we have also endeavored to
provide accessor methods.  One example of such a method is
\Rfunction{getTranscripts}, which will take a RangedData object as a
means to specify which ranges, chromosomes and strands to get data
for, and will then return another RangedData object that will contain
the Transcript ranges from the specified regions.

<<getTranscripts 1>>=
txdb <- loadFeatures(system.file("extdata", "HG18test.sqlite",
                                 package="GenomicFeatures"))
library(IRanges)
rd <- RangedData(ranges = IRanges(start=c(500,10500),end=c(10000,30000)),
                 space = rep("chr1",2), 
                 strand = rep("-",2))
getTranscripts(txdb, rd)
@



\subsection{Mapping data from a TranscriptDb Object}

An even more common operation than simple data retrieval is to take a
set of regions and map those onto the contents of the TranscriptDb
object.  Unlike a simple getter method such as
\Rfunction{getTranscripts}, a method like Rfunction{mapTranscripts}
will return a RangedData that represents the mapping of the original
ranges to the transcript values contained in the database.


<<mapTranscripts 1, eval=FALSE>>=
txdb <- loadFeatures(system.file("extdata", "HG18test.sqlite",
                                 package="GenomicFeatures"))
library(IRanges)
rd <- RangedData(ranges = IRanges(start=c(500,10500),end=c(10000,30000)),
                 space = rep("chr1",2), 
                 strand = rep("-",2))
mapTranscripts(rd, txdb)
@


\section{Session Information}

The version number of R and packages loaded for generating the vignette were:

<<SessionInfo, echo=FALSE>>=
sessionInfo()
@

\end{document}
