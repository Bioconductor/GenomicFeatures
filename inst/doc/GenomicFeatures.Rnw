%\VignetteIndexEntry{Making and Utilizing TranscriptDb Objects}
%\VignetteKeywords{annotation}
%\VignettePackage{GenomicFeatures}
\documentclass[11pt]{article}

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}


\title{Making and Utilizing TranscriptDb Objects}
\author{Marc Carlson}

\SweaveOpts{keep.source=TRUE}

\begin{document}

\maketitle

\section{Introduction}

The \Rpackage{GenomicFeatures} package is a resource for standardizing
the way we deal with Genomic Features annotations in Biocondutor.
\Rpackage{GenomicFeatures} stores annotation data for the location of
transcripts and exons inside of a SQLite database and presents the R
user with a \Rclass{TranscriptDb} object that contains a handle to the
database.  Methods are provided for accessing the contents of this database.


\subsection{What kind of data is stored inside of a TranscriptDb Object}
A standard \Rclass{TranscriptDb} should primarily contain data about
transcripts and exons.  The transcript data will include the
chromosome, strand, as well along with the start and end positions
relative to the genome.  The Exons will include much of the same
information as the transcripts, but they will also include a key that
maps them to their transcripts along with a rank to indicate their
relative ordering within a transcript.  The rank of the exons will
always be reported relative to the transcript they are mapped to.


\subsection{Generating a TranscriptDb Object}

Most of the time, you will probably want to generate a \Rclass{TranscriptDb}
object from a standard source of annotations.  For this, you will want
to use a helper function like \Rfunction{make\Rclass{TranscriptDb}FromUCSC} or
\Rfunction{make\Rclass{TranscriptDb}FromBiomart}.

<<makeTranscriptDbFromUCSC 1>>=
library(GenomicFeatures)
txAnn <- makeTranscriptDbFromUCSC()
@

But for those times when you want to generate an annotation from a
more generic source, we also are providing
\Rfunction{make\Rclass{TranscriptDb}}.  It will be a lot less convenient to use
a function like \Rfunction{make\Rclass{TranscriptDb}} of course, but at least
it buys you the flexibility to produce a TransctriptDb from any
source.



\subsection{Saving and Loading a TranscriptDb Object}

When you 1st make your \Rclass{TranscriptDb} Object, it is running from a
temporary file.  In order to save it you need to use the
\Rfunction{saveFeatures} function.

<<saveFeatures 1, eval=FALSE>>=
saveFeatures(txAnn, file="fileName.sqlite")
@

To retrieve the \Rclass{TranscriptDb} object, you only need to use the
\Rfunction{loadFeatures} function.

<<loadFeatures 1, eval=FALSE>>=
loadFeatures("fileName.sqlite")
@


\subsection{Getting data from a TranscriptDb Object}

A \Rclass{TranscriptDb} object is really just an R object that points
to a SQLite database.  This database can of course be accessed by
simply using the \Rpackage{DBI} interface, but accessor methods have
also been provided.  One example of such a method is
\Rfunction{getTranscripts}, which will take a RangedData object as a
means to specify which ranges, chromosomes and strands to get data
for, and will then return another RangedData object that will contain
the Transcript ranges from the specified regions.

<<getTranscripts 1>>=
txdb <- loadFeatures(system.file("extdata", "HG18test.sqlite",
                                 package="GenomicFeatures"))
library(IRanges)
rd <- RangedData(ranges = IRanges(start=c(500,10500),end=c(10000,30000)),
                 space = rep("chr1",2), 
                 strand = rep("-",2))
getTranscripts(rd, txdb)
@



\subsection{Mapping data from a TranscriptDb Object}

An even more common operation than simple data retrieval is to take a
set of regions and map those onto the contents of the \Rclass{TranscriptDb}
object.  Unlike a simple getter method such as
\Rfunction{getTranscripts}, a method like Rfunction{mapTranscripts}
will return a RangedData that represents the mapping of the original
ranges to the transcript values contained in the database.


<<mapTranscripts 1, eval=FALSE>>=
txdb <- loadFeatures(system.file("extdata", "HG18test.sqlite",
                                 package="GenomicFeatures"))
library(IRanges)
rd <- RangedData(ranges = IRanges(start=c(500,10500),end=c(10000,30000)),
                 space = rep("chr1",2), 
                 strand = rep("-",2))
mapTranscripts(rd, txdb)
@


\subsection{Example: Retrieving data from an experiment}

So lets suppose that you have run an experiment. After mapping all
your reads to a Genome and collapsing them into a set of ranges, you
want to find out what Genomic Features a particular range overlaps
with.  Here is how you might proceed:

<<mapTranscripts 1, eval=FALSE>>=
library(GenomicFeatures)
txdb <- loadFeatures(system.file("extdata", "HG18test.sqlite",
                                 package="GenomicFeatures"))
library(IRanges)

##rd will represent the RangedData object that you have (your data)
rd <- RangedData(ranges = IRanges(start=6700,end=7700),
                 space = "chr1", 
                 strand = "-")

mapTranscripts(rd, txdb)

mapExons(rd, txdb)

@




\section{Session Information}

The version number of R and packages loaded for generating the vignette were:

<<SessionInfo, echo=FALSE>>=
sessionInfo()
@

\end{document}
