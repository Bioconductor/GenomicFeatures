%\VignetteIndexEntry{Making and Utilizing TranscriptDb Objects}
%\VignetteKeywords{annotation}
%\VignettePackage{GenomicFeatures}
\documentclass[11pt]{article}

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rcode}[1]{{\texttt{#1}}}


\title{Making and Utilizing TranscriptDb Objects}
\author{Biocore Team}

\SweaveOpts{keep.source=TRUE}

\begin{document}

\maketitle


\section{Introduction}

The \Rpackage{GenomicFeatures} package is designed to obtain genomic
features metadata from UCSC Genome Bioinformatics and BioMart for
ChIP-chip, ChIP-seq, and RNA-seq analyses. It is currently focused on
transcript-related features, but its scope will grow in future releases.

<<loadGenomicFeatures>>=
suppressMessages(library(IRanges))
library(GenomicFeatures)
@


\section{Transcript Metadata}

\subsection{\Rclass{TranscriptDb} Objects}

The \Rpackage{GenomicFeatures} package uses \Rclass{TranscriptDb}
objects to store transcript metadata. This class is designed to map
the 5' untranslated regions (UTRs), protein coding sequence (CDSs),
and 3' UTRs for a set mRNA transcripts to their associated genome,
where the combined 5' UTR, CDS, and 3' UTR region for an mRNA
transcript either originated from a single exon or from multiple
exons that were spliced together post-transcription.

As the suffix of the class name suggests, \Rclass{TranscriptDb}
objects are backed by a SQLite database. This database manages:

\begin{enumerate}
\item genes and their associated mRNA transcripts
\item pre-mRNA transcript genomic locations for mRNA transcripts
\item exon genomic locations
\item protein coding sequence contig genomic locations
\item the relationships amongst mRNA transcripts, exons, and
      protein coding sequence contigs
\end{enumerate}


\subsection{Creating New \Rclass{TranscriptDb} Objects}

The \Rpackage{GenomicFeatures} package contains three methods for
creating new \Rclass{TranscriptDb} objects:

\begin{enumerate}
\item Download from a UCSC Genome Bioinformatics
\item Download from BioMart
\item Use \Rclass{data.frame} objects containing transcript metadata
\end{enumerate}


\subsubsection{UCSC Genome Bioinformatics}

The function \Rfunction{makeTranscriptDbFromUCSC} downloads UCSC Genome
Bioinformatics transcript tables (e.g. \Rcode{"knownGene"},
\Rcode{"refGene"}, \Rcode{"ensGene"}) for a genome build (e.g.
\Rcode{"mm9"}, \Rcode{"hg19"}).

<<makeTranscriptDbFromUCSC, eval=FALSE>>=
mm9KG <- makeTranscriptDbFromUCSC(genome = "mm9", tablename = "knownGene")
mm9KG
@


\subsubsection{BioMart}

<<makeTranscriptDbFromBiomart, eval=FALSE>>=
mmusculusEnsembl <- 
  makeTranscriptDbFromBiomart(biomart = "ensembl",
                              dataset = "mmusculus_gene_ensembl")
@


\subsubsection{\Rclass{data.frame} Inputs}

The function \Rfunction{makeTranscriptDb} creates \Rclass{TransctriptDb}
objects from \Rclass{data.frame} objects.


\subsection{Saving and Loading a TranscriptDb Object}

When you 1st make your \Rclass{TranscriptDb} object, it is running from a
temporary file.  In order to save it you need to use the
\Rfunction{saveFeatures} function.

<<saveFeatures 1, eval=FALSE>>=
saveFeatures(txAnn, file="fileName.sqlite")
@

To retrieve the \Rclass{TranscriptDb} object, you only need to use the
\Rfunction{loadFeatures} function.

<<loadFeatures 1, eval=FALSE>>=
loadFeatures("fileName.sqlite")
@

<<load_UCSC_KG>>=
txdb <- loadFeatures(system.file("extdata", "UCSC_knownGene_sample.sqlite",
                                 package="GenomicFeatures"))
@


\subsection{Getting Transcript Ranges}


\subsection{Getting Overlapped Transcript Ranges}

The \Rfunction{transcriptsByRanges} function returns a \Rclass{RangedData}
object containing metadata for transcripts that are overlapped by
specified locations from a \Rclass{RangedData} object.

<<transcriptsByRanges>>=
rd <- RangedData(ranges = IRanges(start=c(500,10500),end=c(10000,30000)),
                 space = rep("chr1",2), 
                 strand = rep("-",2))
transcriptsByRanges(txdb, rd)
@


\subsection{Binding Transcript Data to a RangedData Object}


<<bindTranscripts>>=
rd <- RangedData(ranges = IRanges(start=c(500,10500),end=c(10000,30000)),
                 space = rep("chr1",2), 
                 strand = rep("-",2))
bindTranscripts(txdb, rd)
@


\subsection{Transcript Overlap Counts}


\subsection{Example: Retrieving data from an experiment}

So lets suppose that you have run an experiment. After mapping all
your reads to a genome and collapsing them into a set of ranges, you
want to find out what genomic Features a particular range overlaps
with.  Here is how you might proceed:

<<mapTranscripts 1, eval=FALSE>>=
##rd will represent the RangedData object that you have (your data)
rd <- RangedData(ranges = IRanges(start=6700,end=7700),
                 space = "chr1", 
                 strand = "-")

bindTranscripts(txdb, rd)

bindExons(txdb, rd)

@


\section{Session Information}

The version number of R and packages loaded for generating the vignette were:

<<SessionInfo, echo=FALSE>>=
sessionInfo()
@

\end{document}
